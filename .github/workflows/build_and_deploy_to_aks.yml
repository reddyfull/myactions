name: Build and Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Enter the release tag (e.g., v1.0.0)'
        required: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Decode ACR Credentials and Set Environment Variables
        run: |
          echo "${{ secrets.ACR_CREDENTIALS }}" | base64 -d > acr_credentials.json
          echo "ACR_LOGIN_SERVER=$(jq -r '.["login-server"]' acr_credentials.json)" >> $GITHUB_ENV
          echo "ACR_USERNAME=$(jq -r '.username' acr_credentials.json)" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$(jq -r '.password' acr_credentials.json)" >> $GITHUB_ENV
        shell: bash

      - name: Login to Azure Container Registry
        run: echo "$ACR_PASSWORD" | docker login $ACR_LOGIN_SERVER --username $ACR_USERNAME --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t $ACR_LOGIN_SERVER/myapp:${{ github.event.inputs.releaseTag }} .
          docker push $ACR_LOGIN_SERVER/myapp:${{ github.event.inputs.releaseTag }}

      - name: Pull and Verify Docker Image
        run: |
          docker pull $ACR_LOGIN_SERVER/myapp:${{ github.event.inputs.releaseTag }}
          docker create --name temp-container $ACR_LOGIN_SERVER/myapp:${{ github.event.inputs.releaseTag }}
          if ! docker cp temp-container:/usr/share/nginx/html/welcome.html welcome.html; then
            echo "welcome.html not found in the image" && exit 1
          fi
          if ! docker cp temp-container:/usr/share/nginx/html/thankyou.html thankyou.html; then
            echo "thankyou.html not found in the image" && exit 1
          fi
          docker rm temp-container

      - name: Replace image tag in Kubernetes deployment file
        run: |
          sed -i "s|kalidynamics2024.azurecr.io/myapp:RELEASE_TAG_PLACEHOLDER|$ACR_LOGIN_SERVER/myapp:${{ github.event.inputs.releaseTag }}|" .github/kubernetes/aks_deployment.yaml

      - name: Decode KUBECONFIG and Write to File
        run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yml

      - name: Deploy to AKS
        run: |
          export KUBECONFIG=$PWD/kubeconfig.yml
          kubectl apply -f .github/kubernetes/aks_deployment.yaml
          kubectl apply -f .github/kubernetes/aks_service.yaml
          kubectl apply -f .github/kubernetes/aks_hpa.yaml
